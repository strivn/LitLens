{
  "project_overview": {
    "name": "LitLens",
    "description": "An intelligent research assistant system that leverages AI agents to help users efficiently find, analyze, and synthesize academic research.",
    "purpose": "Address the challenges of overwhelming academic research by creating specialized agent systems that handle different parts of the research process efficiently.",
    "version": "0.1.0",
    "status": "Proof of concept"
  },
  "key_dependencies": {
    "core_frameworks": [
      "Model Context Protocol (MCP)",
      "LangChain"
    ],
    "external_apis": [
      "arXiv API",
      "OpenAI API"
    ],
    "python_packages": [
      "httpx",
      "langchain",
      "langchain-community",
      "mcp[cli]",
      "uvicorn",
      "arxiv",
      "python-dotenv",
      "langchain-openai",
      "dotenv",
      "pytest"
    ]
  },
  "architecture": {
    "components": [
      {
        "name": "SourceSeeker",
        "type": "Retriever Agent",
        "responsibility": "Find and initially evaluate relevant research papers",
        "process": [
          "Analyzes query to identify key concepts and search terms",
          "Searches multiple academic sources (currently only arXiv)",
          "Performs initial relevance assessment based on abstracts and metadata",
          "Ranks and filters papers by relevance score"
        ],
        "status": "Implemented"
      },
      {
        "name": "InsightWeaver",
        "type": "Synthesizer Agent",
        "responsibility": "Perform deep analysis of papers identified by SourceSeeker",
        "process": [
          "Reads full papers or targeted sections",
          "Groups papers by subtopic and research approach",
          "Identifies agreements, contradictions, and trends across papers",
          "Organizes information into a coherent synthesis"
        ],
        "status": "Planned (not yet implemented)"
      },
      {
        "name": "Orchestrator",
        "type": "Management Component",
        "responsibility": "Manage communication between agents and user interface",
        "process": [
          "Routes messages between components using MCP",
          "Maintains conversation state",
          "Handles error conditions and recovery"
        ],
        "status": "Partially implemented through main.py"
      }
    ],
    "communication_flow": [
      "User submits research query to Claude",
      "Claude formats query for SourceSeeker agent using MCP",
      "SourceSeeker searches and returns relevant papers",
      "Claude passes papers to InsightWeaver agent (future)",
      "InsightWeaver performs analysis and produces synthesis (future)",
      "Claude presents findings to user in conversational format"
    ],
    "integration": "Claude Desktop via MCP"
  },
  "implementation_details": {
    "search_modes": [
      {
        "name": "ReAct Agent",
        "description": "Full agent reasoning with step-by-step search process",
        "status": "Implemented"
      }
    ],
    "search_optimization": {
      "multiple_search_terms": "Uses LLM to generate alternative search queries",
      "deduplication": "Combines and deduplicates results from multiple searches",
      "ranking": "Ranks results by frequency of appearance and position"
    },
    "mcp_integration": {
      "server": "FastMCP server exposing tools for Claude Desktop integration",
      "tools": [
        {
          "name": "search_arxiv",
          "description": "Search arXiv for academic papers when user wants to find scientific publications",
          "parameters": ["query", "max_docs", "model_name"]
        }
      ]
    }
  },
  "file_summaries": {
    "README.md": "Project overview documenting the dual-agent architecture, components, and communication flow. Includes installation instructions and usage examples.",
    "pyproject.toml": "Project configuration specifying Python dependencies including httpx, langchain, mcp, arxiv, and OpenAI integration.",
    "litlens/main.py": "MCP server implementation that exposes the search_arxiv tool and serves as the entry point for the application.",
    "litlens/agents/arxiv_agent.py": "Implementation of the arXiv search agent with multiple search optimization strategies, including query planning and result deduplication.",
    "mcp_config.json": "Configuration for the MCP server that allows Claude Desktop to connect to the LitLens application.",
    "claude/server_example.py": "Example MCP server implementation demonstrating MCP functionality with a SQLite database.",
    ".env.example": "Template for environment variables including OpenAI API key and model configuration."
  },
  "current_state": {
    "implemented_features": [
      "arXiv search capability through MCP",
      "LLM-powered search term optimization",
      "Result deduplication and ranking",
      "Claude Desktop integration"
    ],
    "planned_features": [
      "InsightWeaver agent for deep analysis",
      "Additional academic sources beyond arXiv",
      "PDF processing for full paper content",
      "Semantic Scholar API integration"
    ],
    "limitations": [
      "Currently only supports arXiv as a data source",
      "Synthesis capabilities not yet implemented",
      "Limited error handling (acceptable for proof of concept)"
    ]
  }
}